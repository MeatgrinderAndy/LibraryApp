// <auto-generated />
using System;
using LibraryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250421220603_LibraryMigration")]
    partial class LibraryMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryApp.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "United Kingdom",
                            DateOfBirth = new DateOnly(1903, 6, 25),
                            FirstName = "George",
                            LastName = "Orwell"
                        },
                        new
                        {
                            Id = 2,
                            Country = "United Kingdom",
                            DateOfBirth = new DateOnly(1965, 7, 31),
                            FirstName = "J.K.",
                            LastName = "Rowling"
                        },
                        new
                        {
                            Id = 3,
                            Country = "United States",
                            DateOfBirth = new DateOnly(1947, 9, 21),
                            FirstName = "Stephen",
                            LastName = "King"
                        },
                        new
                        {
                            Id = 4,
                            Country = "United Kingdom",
                            DateOfBirth = new DateOnly(1890, 9, 15),
                            FirstName = "Agatha",
                            LastName = "Christie"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Japan",
                            DateOfBirth = new DateOnly(1949, 1, 12),
                            FirstName = "Haruki",
                            LastName = "Murakami"
                        },
                        new
                        {
                            Id = 6,
                            Country = "United Kingdom",
                            DateOfBirth = new DateOnly(1775, 12, 16),
                            FirstName = "Jane",
                            LastName = "Austen"
                        },
                        new
                        {
                            Id = 7,
                            Country = "United States",
                            DateOfBirth = new DateOnly(1899, 7, 21),
                            FirstName = "Ernest",
                            LastName = "Hemingway"
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateOnly?>("DateWhenNeedToReturn")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateWhenTaken")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            DateWhenNeedToReturn = new DateOnly(2023, 6, 10),
                            DateWhenTaken = new DateOnly(2023, 5, 10),
                            Description = "Classic dystopian novel about totalitarianism",
                            Genre = "Dystopian",
                            ISBN = "978-0451524935",
                            Title = "1984",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Description = "Political satire about farm animals",
                            Genre = "Satire",
                            ISBN = "978-0452284234",
                            Title = "Animal Farm"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            DateWhenNeedToReturn = new DateOnly(2023, 6, 15),
                            DateWhenTaken = new DateOnly(2023, 5, 15),
                            Description = "First book in the Harry Potter series",
                            Genre = "Fantasy",
                            ISBN = "978-0747532743",
                            Title = "Harry Potter and the Philosopher's Stone",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            Description = "Second book in the Harry Potter series",
                            Genre = "Fantasy",
                            ISBN = "978-0747538486",
                            Title = "Harry Potter and the Chamber of Secrets"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            Description = "Classic horror novel about a haunted hotel",
                            Genre = "Horror",
                            ISBN = "978-1501142970",
                            Title = "The Shining"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            Description = "Story about a shape-shifting monster",
                            Genre = "Horror",
                            ISBN = "978-1501175466",
                            Title = "It"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 4,
                            Description = "Famous Hercule Poirot mystery",
                            Genre = "Mystery",
                            ISBN = "978-0062073501",
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 5,
                            Description = "Surreal novel blending reality and fantasy",
                            Genre = "Magical Realism",
                            ISBN = "978-0307476463",
                            Title = "Kafka on the Shore"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 6,
                            Description = "Classic romance novel",
                            Genre = "Romance",
                            ISBN = "978-1503290564",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 7,
                            Description = "Story of an aging fisherman's struggle",
                            Genre = "Literary Fiction",
                            ISBN = "978-0684801469",
                            Title = "The Old Man and the Sea"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 3,
                            Description = "Epic novel about a deadly pandemic",
                            Genre = "Post-Apocalyptic",
                            ISBN = "978-1501142971",
                            Title = "The Stand"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 5,
                            Description = "Coming-of-age story set in 1960s Tokyo",
                            Genre = "Literary Fiction",
                            ISBN = "978-0099458326",
                            Title = "Norwegian Wood"
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@library.com",
                            PasswordHash = "WZRHGrsBESr8wYFZ9sx0tPURuZgG2lmzyvWpwXPKz8U=",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "john.doe@example.com",
                            PasswordHash = "WZRHGrsBESr8wYFZ9sx0tPURuZgG2lmzyvWpwXPKz8U=",
                            Role = "User",
                            Username = "john_doe"
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.Book", b =>
                {
                    b.HasOne("LibraryApp.Models.Author", "Author")
                        .WithMany("books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApp.Models.Author", b =>
                {
                    b.Navigation("books");
                });
#pragma warning restore 612, 618
        }
    }
}
